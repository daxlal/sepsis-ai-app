# -*- coding: utf-8 -*-
"""Sepsis AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11wsczA05cOix9As4L-pl6QnLPycXApNk
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Load dataset
import joblib
clf = joblib.load("sepsis_model.pkl")

# Evaluate model
y_pred = clf.predict(X_test)
print("üìä Model Performance:")
print(classification_report(y_test, y_pred))

# Define risk prediction function
def predict_risk(values):
    input_df = pd.DataFrame([values], columns=X.columns)
    prediction = clf.predict(input_df)[0]
    return f"üß† Predicted Sepsis Risk: {prediction}"

# Example use
example_input = [110, 160, 2.3, 85, 75, 130, 5.2, 16000, 55, 350, 42]
print("üîç Example Prediction:")
print(predict_risk(example_input))


import gradio as gr

def predict_sepsis_risk(
    IL6, CRP, PCT, IL8, TNFa, SAA, Lactate, WBC, IL1b, VEGF, IL10
):
    input_vals = [IL6, CRP, PCT, IL8, TNFa, SAA, Lactate, WBC, IL1b, VEGF, IL10]
    result = predict_risk(input_vals)
    return result

gr.Interface(
    fn=predict_sepsis_risk,
    inputs=[
        gr.Number(label="IL-6 (pg/mL)"),
        gr.Number(label="CRP (mg/L)"),
        gr.Number(label="PCT (ng/mL)"),
        gr.Number(label="IL-8 (pg/mL)"),
        gr.Number(label="TNF-Œ± (pg/mL)"),
        gr.Number(label="SAA (mg/L)"),
        gr.Number(label="Lactate (mmol/L)"),
        gr.Number(label="WBC Count (/ŒºL)"),
        gr.Number(label="IL-1Œ≤ (pg/mL)"),
        gr.Number(label="VEGF (pg/mL)"),
        gr.Number(label="IL-10 (pg/mL)")
    ],
    outputs="text",
    title="Sepsis Risk Detector",
    description="Enter biomarker values to predict sepsis risk level."
).launch()


import gradio as gr

def predict_sepsis_risk(
    IL6, CRP, PCT, IL8, TNFa, SAA, Lactate, WBC, IL1b, VEGF, IL10
):
    input_vals = [IL6, CRP, PCT, IL8, TNFa, SAA, Lactate, WBC, IL1b, VEGF, IL10]
    return predict_risk(input_vals)

gr.Interface(
    fn=predict_sepsis_risk,
    inputs=[
        gr.Number(label="IL-6 (pg/mL)"),
        gr.Number(label="CRP (mg/L)"),
        gr.Number(label="PCT (ng/mL)"),
        gr.Number(label="IL-8 (pg/mL)"),
        gr.Number(label="TNF-Œ± (pg/mL)"),
        gr.Number(label="SAA (mg/L)"),
        gr.Number(label="Lactate (mmol/L)"),
        gr.Number(label="WBC Count (/ŒºL)"),
        gr.Number(label="IL-1Œ≤ (pg/mL)"),
        gr.Number(label="VEGF (pg/mL)"),
        gr.Number(label="IL-10 (pg/mL)")
    ],
    outputs="text",
    title="üß† Sepsis Risk Detector",
    description="Enter biomarker values. AI model will predict sepsis risk level."
).launch()

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import joblib

# Load your dataset
df = pd.read_csv("/content/sepsis_ai_dataset.csv")

# Prepare data
X = df.drop("Risk_Level", axis=1)
y = df["Risk_Level"]

# Train model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X, y)

# Save model
joblib.dump(clf, "sepsis_model.pkl")
print("‚úÖ Model saved as 'sepsis_model.pkl'")

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import joblib

# Load dataset (adjust path if needed)
import joblib
clf = joblib.load("sepsis_model.pkl")

# Save the model
joblib.dump(clf, 'sepsis_model.pkl')
print("‚úÖ Model trained and saved as sepsis_model.pkl")

import gradio as gr
import joblib
import pandas as pd

# Load trained model
model = joblib.load("sepsis_model.pkl")

# Define feature names in order
feature_names = [
    "IL6", "CRP", "PCT", "IL8", "TNFa", "SAA",
    "Lactate", "WBC", "IL1b", "VEGF", "IL10"
]

# Prediction function
def predict_sepsis(IL6, CRP, PCT, IL8, TNFa, SAA, Lactate, WBC, IL1b, VEGF, IL10):
    input_data = pd.DataFrame([[IL6, CRP, PCT, IL8, TNFa, SAA, Lactate, WBC, IL1b, VEGF, IL10]], columns=feature_names)
    prediction = model.predict(input_data)[0]
    return f"üß† Predicted Sepsis Risk: {prediction.upper()}"

# Gradio UI
iface = gr.Interface(
    fn=predict_sepsis,
    inputs=[
        gr.Number(label="IL-6 (pg/mL)"),
        gr.Number(label="CRP (mg/L)"),
        gr.Number(label="PCT (ng/mL)"),
        gr.Number(label="IL-8 (pg/mL)"),
        gr.Number(label="TNF-Œ± (pg/mL)"),
        gr.Number(label="SAA (mg/L)"),
        gr.Number(label="Lactate (mmol/L)"),
        gr.Number(label="WBC Count (/ŒºL)"),
        gr.Number(label="IL-1Œ≤ (pg/mL)"),
        gr.Number(label="VEGF (pg/mL)"),
        gr.Number(label="IL-10 (pg/mL)")
    ],
    outputs="text",
    title="üß¨ Sepsis Risk Detector",
    description="Enter biomarker levels to predict sepsis risk. Model trained using Random Forest classifier."
)

iface.launch()

with open("requirements.txt", "w") as f:
    f.write("gradio\npandas\nscikit-learn\n")
print("‚úÖ requirements.txt created.")